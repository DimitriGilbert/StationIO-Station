#!/bin/bash
# @parseArger-begin
# @parseArger-help "Read station data" --option "help" --short-option "h"
# @parseArger-verbose --option "verbose" --level "0"
# @parseArger-declarations
# @parseArger pos station "station name"
# @parseArger opt sensor "sensor id" --short s --repeat
# @parseArger opt format "output format" --short f --default-value "plain" --one-of "json" --one-of "csv" --one-of "xml" --one-of "plain" --one-of "html"
# @parseArger opt mesure "mesure id, can conflict with sensor" --short m --repeat
# @parseArger opt output "output file" --short o --complete "file"
# @parseArger-declarations-end

# @parseArger-utils
_helpHasBeenPrinted=1;
_SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd -P)";
# @parseArger-utils-end

# @parseArger-parsing
die()
{
	local _ret="${2:-1}"
	test "${_PRINT_HELP:-no}" = yes && print_help >&2
	log "$1" -3 >&2
	exit "${_ret}"
}


begins_with_short_option()
{
	local first_option all_short_options=''
	first_option="${1:0:1}"
	test "$all_short_options" = "${all_short_options/$first_option/}" && return 1 || return 0
}

# POSITIONALS ARGUMENTS
_positionals=();
_arg_station="";
# OPTIONALS ARGUMENTS
_arg_sensor=()
_arg_format="plain"
_one_of_arg_format=("json" "csv" "xml" "plain" "html" );
_arg_mesure=()
_arg_output=
# FLAGS
_verbose_level="0";



print_help()
{
	_triggerSCHelp=1;

	if [[ "$_helpHasBeenPrinted" == "1" ]]; then
		_helpHasBeenPrinted=0;
		echo -e "Read station data:"
	echo -e "	station: station name"
	echo -e "	-s, --sensor <sensor>: sensor id, repeatable"
	echo -e "	-f, --format <format>: output format [default: ' plain '] [one of 'json' 'csv' 'xml' 'plain' 'html']"
	echo -e "	-m, --mesure <mesure>: mesure id, can conflict with sensor, repeatable"
	echo -e "	-o, --output <output>: output file"
	echo -e "Usage :
	$0 <station> [--sensor <value>] [--format <value>] [--mesure <value>] [--output <value>]";
	fi

}

log() {
	local _arg_msg="${1}";
	local _arg_level="${2:"0"}";
	if [ "${_arg_level}" -le "${_verbose_level}" ]; then
		case "$_arg_level" in
			-3)
				_arg_COLOR="\033[0;31m";
				;;
			-2)
				_arg_COLOR="\033[0;33m";
				;;
			-1)
				_arg_COLOR="\033[1;33m";
				;;
			1)
				_arg_COLOR="\033[0;32m";
				;;
			2)
				_arg_COLOR="\033[1;36m";
				;;
			3)
				_arg_COLOR="\033[0;36m";
				;;
			*)
				_arg_COLOR="\033[0m";
				;;
		esac
		echo -e "${_arg_COLOR}${_arg_msg}\033[0m";
	fi
}

parse_commandline()
{
	_positionals_count=0
	while test $# -gt 0
	do
		_key="$1"
		case "$_key" in
			-s|--sensor)
				test $# -lt 2 && die "Missing value for the option: '$_key'" 1
				_arg_sensor+=("$2")
				shift
				;;
			--sensor=*)
				_arg_sensor+=("${_key##--sensor=}")
				;;
			-s*)
				_arg_sensor+=("${_key##-s}")
				;;
			
			-f|--format)
				test $# -lt 2 && die "Missing value for the option: '$_key'" 1
				_arg_format="$2"
				if [[ "${#_one_of_arg_format[@]}" -gt 0 ]];then [[ "${_one_of_arg_format[*]}" =~ (^|[[:space:]])"$_arg_format"($|[[:space:]]) ]] || die "format must be one of: json csv xml plain html";fi
				shift
				;;
			--format=*)
				_arg_format="${_key##--format=}"
				if [[ "${#_one_of_arg_format[@]}" -gt 0 ]];then [[ "${_one_of_arg_format[*]}" =~ (^|[[:space:]])"$_arg_format"($|[[:space:]]) ]] || die "format must be one of: json csv xml plain html";fi
				;;
			-f*)
				_arg_format="${_key##-f}"
				if [[ "${#_one_of_arg_format[@]}" -gt 0 ]];then [[ "${_one_of_arg_format[*]}" =~ (^|[[:space:]])"$_arg_format"($|[[:space:]]) ]] || die "format must be one of: json csv xml plain html";fi
				;;
			
			-m|--mesure)
				test $# -lt 2 && die "Missing value for the option: '$_key'" 1
				_arg_mesure+=("$2")
				shift
				;;
			--mesure=*)
				_arg_mesure+=("${_key##--mesure=}")
				;;
			-m*)
				_arg_mesure+=("${_key##-m}")
				;;
			
			-o|--output)
				test $# -lt 2 && die "Missing value for the option: '$_key'" 1
				_arg_output="$2"
				shift
				;;
			--output=*)
				_arg_output="${_key##--output=}"
				;;
			-o*)
				_arg_output="${_key##-o}"
				;;
			
			-h|--help)
				print_help;
				exit 0;
				;;
			-h*)
				print_help;
				exit 0;
				;;
			-v|--version)
				print_version;
				exit 0;
				;;
			-v*)
				print_version;
				exit 0;
				;;
			--verbose)
				if [ $# -lt 2 ];then
					_verbose_level="$((_verbose_level + 1))";
				else
					_verbose_level="$2";
					shift;
				fi
				;;
			
			*)
				_last_positional="$1"
				_positionals+=("$_last_positional")
				_positionals_count=$((_positionals_count + 1))
				;;
		esac
		shift
	done
}


handle_passed_args_count()
{
	local _required_args_string="station"
	if [ "${_positionals_count}" -gt 1 ] && [ "$_helpHasBeenPrinted" == "1" ];then
		_PRINT_HELP=yes die "FATAL ERROR: There were spurious positional arguments --- we expect at most 1 (namely: $_required_args_string), but got ${_positionals_count} (the last one was: '${_last_positional}').\n\t${_positionals[*]}" 1
	fi
	if [ "${_positionals_count}" -lt 1 ] && [ "$_helpHasBeenPrinted" == "1" ];then
		_PRINT_HELP=yes die "FATAL ERROR: Not enough positional arguments - we require at least 1 (namely: $_required_args_string), but got only ${_positionals_count}.
	${_positionals[*]}" 1;
	fi
}


assign_positional_args()
{
	local _positional_name _shift_for=$1;
	_positional_names="_arg_station ";
	shift "$_shift_for"
	for _positional_name in ${_positional_names};do
		test $# -gt 0 || break;
		eval "if [ \"\$_one_of${_positional_name}\" != \"\" ];then [[ \"\${_one_of${_positional_name}[*]}\" =~ \"\${1}\" ]];fi" || die "${_positional_name} must be one of: $(eval "echo \"\${_one_of${_positional_name}[*]}\"")" 1;
		eval "$_positional_name=\${1}" || die "Error during argument parsing, possibly an ParseArger bug." 1;
		shift;
	done
}

print_debug()
{
	print_help
	# shellcheck disable=SC2145
	echo "DEBUG: $0 $@";
	
	echo -e "\tstation: ${_arg_station}";
	echo -e "\tsensor: ${_arg_sensor[*]}";
	echo -e "\tformat: ${_arg_format}";
	echo -e "\tmesure: ${_arg_mesure[*]}";
	echo -e "\toutput: ${_arg_output}";

}

print_version()
{
	echo "";
}

on_interrupt() {
	die Process aborted! 130;
}

parse_commandline "$@";
handle_passed_args_count;
assign_positional_args 1 "${_positionals[@]}";
trap on_interrupt INT;



# @parseArger-parsing-end
# print_debug "$@"
# @parseArger-end

# shellcheck source=common
source "$_SCRIPT_DIR/common";

if station_exists "$_arg_station"; then
	# shellcheck source="../stations/stations"
	source "$STATIONIO_DIR/stations/stations";
	# shellcheck source=./export-conf
	source "$STATIONIO_DIR/utils/export-conf" "${_arg_station}";

	if [ "$stationIOip" != "" ]; then
		if [ "$_arg_format" == "json" ] || [ "$_arg_format" == "xml" ]; then
			_arg_format="application/${_arg_format}";
		else
			_arg_format="text/${_arg_format}";
		fi
		
		_surl="http://$stationIOip/";
		wgcmd=(wget -q -O - --header "Accept:${_arg_format}" --header "Content-Type:${_arg_format}");
		_urlargs=();

		if [ "${#_arg_sensor[@]}" -gt 0 ]; then
			for sen_ in "${_arg_sensor[@]}"; do
				_urlargs+=("sensor=$sen_");
			done
		fi
		if [ "${#_arg_mesure[@]}" -gt 0 ]; then
			for mes_ in "${_arg_mesure[@]}"; do
				_urlargs+=("mesure=$mes_");
			done
		fi
		if [ "${#_urlargs[@]}" -gt 0 ]; then
			_surl+="?";
			for arg_ in "${_urlargs[@]}"; do
				_surl+="$arg_&";
			done
		fi
		wgcmd+=("$_surl");

		output=$("${wgcmd[@]}");
		if [ "$_arg_output" != "" ]; then
			echo -e "$output" >"$_arg_output";
		else
			echo -e "$output";
		fi
	else
		die "Station $_arg_station has no ip";
	fi
else
	die "Station $_arg_station does not exist";
fi

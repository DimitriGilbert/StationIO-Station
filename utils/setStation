#!/bin/bash
# @parseArger-begin
# @parseArger-help "I send an SOS to the world" --option "help" --short-option "h"
# @parseArger-declarations
# @parseArger pos name "station name"
# @parseArger opt sensor "sensor to add" --short s --repeat
# @parseArger opt ip "ip address" --short i --default-value "0"
# @parseArger opt board "pio env" --default-value "nodemcuv2"
# @parseArger opt data-file "data-file to add" --repeat
# @parseArger opt data-directory "data-directory to add" --repeat
# @parseArger opt js "js to add" --repeat
# @parseArger opt css "css to add" --repeat
# @parseArger-declarations-end

# @parseArger-parsing
die()
{
	local _ret="${2:-1}"
	test "${_PRINT_HELP:-no}" = yes && print_help >&2
	echo "$1" >&2
	exit "${_ret}"
}


begins_with_short_option()
{
	local first_option all_short_options=''
	first_option="${1:0:1}"
	test "$all_short_options" = "${all_short_options/$first_option/}" && return 1 || return 0
}

# POSITIONALS ARGUMENTS
_positionals=();
_arg_name="";
# OPTIONALS ARGUMENTS
_arg_sensor=()
_arg_ip="0"
_arg_board="nodemcuv2"
_arg_data_file=()
_arg_data_directory=()
_arg_js=()
_arg_css=()
# FLAGS


print_help()
{
	echo -e "I send an SOS to the world:"
	echo -e "	name: station name"
	echo -e "	-s, --sensor <sensor>: sensor to add, repeatable"
	echo -e "	-i, --ip <ip>: ip address [default: ' 0 ']"
	echo -e "	--board <board>: pio env [default: ' nodemcuv2 ']"
	echo -e "	--data-file <data-file>: data-file to add, repeatable"
	echo -e "	--data-directory <data-directory>: data-directory to add, repeatable"
	echo -e "	--js <js>: js to add, repeatable"
	echo -e "	--css <css>: css to add, repeatable"
	echo -e "Usage :
	$0 <name> [--sensor <value>] [--ip <value>] [--board <value>] [--data-file <value>] [--data-directory <value>] [--js <value>] [--css <value>]"
}

parse_commandline()
{
	_positionals_count=0
	while test $# -gt 0
	do
		_key="$1"
		case "$_key" in
			-s|--sensor)
				test $# -lt 2 && die "Missing value for the option: '$_key'" 1
				_arg_sensor+=("$2")
				shift
				;;
			--sensor=*)
				_arg_sensor+=("${_key##--sensor=}")
				;;
			-s*)
				_arg_sensor+=("${_key##-s}")
				;;
			
			-i|--ip)
				test $# -lt 2 && die "Missing value for the option: '$_key'" 1
				_arg_ip="$2"
				shift
				;;
			--ip=*)
				_arg_ip="${_key##--ip=}"
				;;
			-i*)
				_arg_ip="${_key##-i}"
				;;
			
			--board)
				test $# -lt 2 && die "Missing value for the option: '$_key'" 1
				_arg_board="$2"
				shift
				;;
			--board=*)
				_arg_board="${_key##--board=}"
				;;
			
			--data-file)
				test $# -lt 2 && die "Missing value for the option: '$_key'" 1
				_arg_data_file+=("$2")
				shift
				;;
			--data-file=*)
				_arg_data_file+=("${_key##--data-file=}")
				;;
			
			--data-directory)
				test $# -lt 2 && die "Missing value for the option: '$_key'" 1
				_arg_data_directory+=("$2")
				shift
				;;
			--data-directory=*)
				_arg_data_directory+=("${_key##--data-directory=}")
				;;
			
			--js)
				test $# -lt 2 && die "Missing value for the option: '$_key'" 1
				_arg_js+=("$2")
				shift
				;;
			--js=*)
				_arg_js+=("${_key##--js=}")
				;;
			
			--css)
				test $# -lt 2 && die "Missing value for the option: '$_key'" 1
				_arg_css+=("$2")
				shift
				;;
			--css=*)
				_arg_css+=("${_key##--css=}")
				;;
			
			-h|--help)
				print_help;
				exit 0;
				;;
			-h*)
				print_help;
				exit 0;
				;;
			*)
				_last_positional="$1"
				_positionals+=("$_last_positional")
				_positionals_count=$((_positionals_count + 1))
				;;
		esac
		shift
	done
}


handle_passed_args_count()
{
	local _required_args_string="name"
	test "${_positionals_count}" -le 1 || _PRINT_HELP=yes die "FATAL ERROR: There were spurious positional arguments --- we expect at most 1 (namely: $_required_args_string), but got ${_positionals_count} (the last one was: '${_last_positional}')." 1
	test "${_positionals_count}" -ge 1 || _PRINT_HELP=yes die "FATAL ERROR: Not enough positional arguments - we require at least 1 (namely: $_required_args_string), but got only ${_positionals_count}." 1
}


assign_positional_args()
{
	local _positional_name _shift_for=$1;
	_positional_names="_arg_name ";
	shift "$_shift_for"
	for _positional_name in ${_positional_names};do
		test $# -gt 0 || break;
		eval "if [ \"\$_one_of${_positional_name}\" != \"\" ];then [[ \"\${_one_of${_positional_name}[*]}\" =~ \"\${1}\" ]];fi" || die "${_positional_name} must be one of: $(eval "echo \"\${_one_of${_positional_name}[*]}\"")" 1
eval "$_positional_name=\${1}" || die "Error during argument parsing, possibly an Argbash bug." 1;
		shift;
	done
}

print_debug()
{
	print_help
	# shellcheck disable=SC2145
	echo "DEBUG: $0 $@";
	
	echo -e "\tname: ${_arg_name}";
	echo -e "\tsensor: ${_arg_sensor | sed 's/-/_/g'}";
	echo -e "\tip: ${_arg_ip | sed 's/-/_/g'}";
	echo -e "\tboard: ${_arg_board | sed 's/-/_/g'}";
	echo -e "\tdata-file: ${_arg_data-file | sed 's/-/_/g'}";
	echo -e "\tdata-directory: ${_arg_data-directory | sed 's/-/_/g'}";
	echo -e "\tjs: ${_arg_js | sed 's/-/_/g'}";
	echo -e "\tcss: ${_arg_css | sed 's/-/_/g'}";

}

parse_commandline "$@"
handle_passed_args_count
assign_positional_args 1 "${_positionals[@]}"

# @parseArger-parsing-end
# print_debug "$@"
# @parseArger-end

if [ ! -d "./stations/.stations" ]; then
	mkdir "./stations/.stations";
fi

# shellcheck source=./exportStationConf
source "utils/exportStationConf" "${_arg_name}";

if [ "$stationIOip" == "" ]; then
	stationIOip="0"
	stationIOboard="nodemcuv2"
	stationIOsensors=()
	stationIOjs=()
	stationIOcss=()
	stationIOfiles=()
	stationIOdirectories=()
fi

if [ "$_arg_ip" != "" ]; then
	if [ "$stationIOip" != "" ] && [ "$_arg_ip" == 0 ]; then
		_arg_ip="$stationIOip";
	fi
	stationIOip="${_arg_ip}";
fi

if [ "$_arg_board" != "" ]; then
	stationIOboard="${_arg_board}";
fi

if [ "${#_arg_sensor[@]}" -gt 0 ]; then
	stationIOsensors=("${_arg_sensor[@]}");
fi

if [ "${#_arg_js[@]}" -gt 0 ]; then
	stationIOjs=("${_arg_js[@]}");
fi

if [ "${#_arg_css[@]}" -gt 0 ]; then
	stationIOcss=("${_arg_css[@]}");
fi

if [ "${#_arg_data_file[@]}" -gt 0 ]; then
	stationIOfiles=("${_arg_data_file[@]}");
fi

if [ "${#_arg_data_directory[@]}" -gt 0 ]; then
	stationIOdirectories=("${_arg_data_directory[@]}");
fi

echo -e "# StationIO configuration for ${_arg_name} station" > "stations/.stations/${_arg_name}";
echo -e "${_arg_name}_ip=\"${stationIOip}\"" >> "stations/.stations/${_arg_name}";
echo -e "${_arg_name}_board=\"${stationIOboard}\"" >> "stations/.stations/${_arg_name}";
echo -e "${_arg_name}_sensors=( $(out=""; for sen in "${stationIOsensors[@]}";do out+=" \"$sen\""; done; echo "$out"; ) )" >> "stations/.stations/${_arg_name}";
echo -e "${_arg_name}_js=( $(out=""; for sen in "${stationIOjs[@]}";do out+=" \"$sen\""; done; echo "$out"; ) )" >> "stations/.stations/${_arg_name}";
echo -e "${_arg_name}_css=( $(out=""; for sen in "${stationIOcss[@]}";do out+=" \"$sen\""; done; echo "$out"; ) )" >> "stations/.stations/${_arg_name}";
echo -e "${_arg_name}_files=( $(out=""; for sen in "${stationIOfiles[@]}";do out+=" \"$sen\""; done; echo "$out"; ) )" >> "stations/.stations/${_arg_name}";
echo -e "${_arg_name}_directories=( $(out=""; for sen in "${stationIOdirectories[@]}";do out+=" \"$sen\""; done; echo "$out"; ) )" >> "stations/.stations/${_arg_name}";

#!/bin/bash
# @parseArger-begin
# @parseArger-help "Create a station" --option "help" --short-option "h"
# @parseArger-verbose --option "verbose" --level "0"
# @parseArger-declarations
# @parseArger pos name "station name"
# @parseArger opt ip "station ip"
# @parseArger opt board "PIO build environement name" --short b
# @parseArger flag config "open configurator" --on
# @parseArger flag edit "open editor" --on
# @parseArger flag force "erase if exists"
# @parseArger-declarations-end

# @parseArger-utils
_helpHasBeenPrinted=1;
_SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd -P)";
# @parseArger-utils-end

# @parseArger-parsing
die()
{
	local _ret="${2:-1}"
	test "${_PRINT_HELP:-no}" = yes && print_help >&2
	log "$1" -3 >&2
	exit "${_ret}"
}


begins_with_short_option()
{
	local first_option all_short_options=''
	first_option="${1:0:1}"
	test "$all_short_options" = "${all_short_options/$first_option/}" && return 1 || return 0
}

# POSITIONALS ARGUMENTS
_positionals=();
_arg_name="";
# OPTIONALS ARGUMENTS
_arg_ip=
_arg_board=
# FLAGS
_arg_config="on"
_arg_edit="on"
_arg_force="off"
_verbose_level="0";



print_help()
{
	_triggerSCHelp=1;

	if [[ "$_helpHasBeenPrinted" == "1" ]]; then
		_helpHasBeenPrinted=0;
		echo -e "Create a station:"
	echo -e "	name: station name"
	echo -e "	--ip <ip>: station ip"
	echo -e "	-b, --board <board>: PIO build environement name"
	echo -e "	--config|--no-config: open configurator, on by default (use --no-config to turn it off)"
	echo -e "	--edit|--no-edit: open editor, on by default (use --no-edit to turn it off)"
	echo -e "	--force|--no-force: erase if exists"
	echo -e "Usage :
	$0 <name> [--ip <value>] [--board <value>] [--[no-]config] [--[no-]edit] [--[no-]force]";
	fi

}

log() {
	local _arg_msg="${1}";
	local _arg_level="${2:"0"}";
	if [ "${_arg_level}" -le "${_verbose_level}" ]; then
		case "$_arg_level" in
			-3)
				_arg_COLOR="\033[0;31m";
				;;
			-2)
				_arg_COLOR="\033[0;33m";
				;;
			-1)
				_arg_COLOR="\033[1;33m";
				;;
			1)
				_arg_COLOR="\033[0;32m";
				;;
			2)
				_arg_COLOR="\033[1;36m";
				;;
			3)
				_arg_COLOR="\033[0;36m";
				;;
			*)
				_arg_COLOR="\033[0m";
				;;
		esac
		echo -e "${_arg_COLOR}${_arg_msg}\033[0m";
	fi
}

parse_commandline()
{
	_positionals_count=0
	while test $# -gt 0
	do
		_key="$1"
		case "$_key" in
			--ip)
				test $# -lt 2 && die "Missing value for the option: '$_key'" 1
				_arg_ip="$2"
				shift
				;;
			--ip=*)
				_arg_ip="${_key##--ip=}"
				;;
			
			-b|--board)
				test $# -lt 2 && die "Missing value for the option: '$_key'" 1
				_arg_board="$2"
				shift
				;;
			--board=*)
				_arg_board="${_key##--board=}"
				;;
			-b*)
				_arg_board="${_key##-b}"
				;;
			
			--config)
				_arg_config="on"
				;;
			--no-config)
				_arg_config="off"
				;;
			--edit)
				_arg_edit="on"
				;;
			--no-edit)
				_arg_edit="off"
				;;
			--force)
				_arg_force="on"
				;;
			--no-force)
				_arg_force="off"
				;;
			-h|--help)
				print_help;
				exit 0;
				;;
			-h*)
				print_help;
				exit 0;
				;;
			-v|--version)
				print_version;
				exit 0;
				;;
			-v*)
				print_version;
				exit 0;
				;;
			--verbose)
				if [ $# -lt 2 ];then
					_verbose_level="$((_verbose_level + 1))";
				else
					_verbose_level="$2";
					shift;
				fi
				;;
			
			*)
				_last_positional="$1"
				_positionals+=("$_last_positional")
				_positionals_count=$((_positionals_count + 1))
				;;
		esac
		shift
	done
}


handle_passed_args_count()
{
	local _required_args_string="name"
	if [ "${_positionals_count}" -gt 1 ] && [ "$_helpHasBeenPrinted" == "1" ];then
		_PRINT_HELP=yes die "FATAL ERROR: There were spurious positional arguments --- we expect at most 1 (namely: $_required_args_string), but got ${_positionals_count} (the last one was: '${_last_positional}').\n\t${_positionals[*]}" 1
	fi
	if [ "${_positionals_count}" -lt 1 ] && [ "$_helpHasBeenPrinted" == "1" ];then
		_PRINT_HELP=yes die "FATAL ERROR: Not enough positional arguments - we require at least 1 (namely: $_required_args_string), but got only ${_positionals_count}.
	${_positionals[*]}" 1;
	fi
}


assign_positional_args()
{
	local _positional_name _shift_for=$1;
	_positional_names="_arg_name ";
	shift "$_shift_for"
	for _positional_name in ${_positional_names};do
		test $# -gt 0 || break;
		eval "if [ \"\$_one_of${_positional_name}\" != \"\" ];then [[ \"\${_one_of${_positional_name}[*]}\" =~ \"\${1}\" ]];fi" || die "${_positional_name} must be one of: $(eval "echo \"\${_one_of${_positional_name}[*]}\"")" 1;
		eval "$_positional_name=\${1}" || die "Error during argument parsing, possibly an ParseArger bug." 1;
		shift;
	done
}

print_debug()
{
	print_help
	# shellcheck disable=SC2145
	echo "DEBUG: $0 $@";
	
	echo -e "\tname: ${_arg_name}";
	echo -e "\tip: ${_arg_ip}";
	echo -e "\tboard: ${_arg_board}";
	echo -e "\tconfig: ${_arg_config}";
	echo -e "\tedit: ${_arg_edit}";
	echo -e "\tforce: ${_arg_force}";

}

print_version()
{
	echo "";
}

on_interrupt() {
	die Process aborted! 130;
}

parse_commandline "$@";
handle_passed_args_count;
assign_positional_args 1 "${_positionals[@]}";
trap on_interrupt INT;



# @parseArger-parsing-end
# print_debug "$@"
# @parseArger-end

# shellcheck source=common
source "$_SCRIPT_DIR/common";
if [ ! -d "$STATIONIO_DIR/stations/.stations" ]; then
	mkdir "$STATIONIO_DIR/stations/.stations";
fi

if ! station_exists "$_arg_name" || [ "$_arg_force" == "on" ]; then
	echo "# StationIO configuration for ${_arg_name} " > "./stations/.stations/${_arg_name}";
	echo "${_arg_name}_ip=${_arg_ip}" >> "./stations/.stations/${_arg_name}";
	echo "${_arg_name}_board=${_arg_board}" >> "./stations/.stations/${_arg_name}";

	echo "${_arg_name}_ip=${_arg_ip}" >> "./stations/stations";
	echo "${_arg_name}_board=${_arg_board}" >> "./stations/stations";

	echo "" > "./stations/${_arg_name}.main.cpp";

	if [ "${_arg_config}" = "on" ]; then
		echo "Use the configurator to create the station code, hit enter when done";
		xdg-open "./index.html";
		# shellcheck disable=SC2034
		read -r configDone;
	fi

	if [ "${_arg_edit}" = "on" ]; then
		echo "Copy the station code to the station file, hit enter when done";
		xdg-open "./stations/${_arg_name}.main.cpp";
		# shellcheck disable=SC2034
		read -r stationCode;
	fi
else 
 die "Station already exists" 1;
fi

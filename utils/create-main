#!/bin/bash
# @parseArger-begin
# @parseArger-help "[WIP] create a station main.cpp" --option "help" --short-option "h"
# @parseArger-verbose --option "verbose" --level "0"
# @parseArger-declarations
# @parseArger pos name "station name"
# @parseArger opt sensor "sensor to add" --short s --repeat --complete-custom "if [ -d src/sensors ]; then echo $(cd src/sensors && /usr/bin/ls *.h | sed 's/\.h//g') ;fi"
# @parseArger opt timer "timer to add" --short t --repeat
# @parseArger opt endpoint "endpoint to add" --short e --repeat
# @parseArger opt wifi-ssid "wifi ssid" --short w
# @parseArger opt wifi-pass "wifi password" --short p
# @parseArger opt include "include string"
# @parseArger opt declare "declare string"
# @parseArger opt setup "setup string"
# @parseArger opt loop "loop string"
# @parseArger opt node "node executable" --default-value "node"
# @parseArger opt file "file to output to" --complete "file"
# @parseArger-declarations-end

# @parseArger-utils
_helpHasBeenPrinted=1;
_SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd -P)";
# @parseArger-utils-end

# @parseArger-parsing
die()
{
	local _ret="${2:-1}"
	test "${_PRINT_HELP:-no}" = yes && print_help >&2
	log "$1" -3 >&2
	exit "${_ret}"
}


begins_with_short_option()
{
	local first_option all_short_options=''
	first_option="${1:0:1}"
	test "$all_short_options" = "${all_short_options/$first_option/}" && return 1 || return 0
}

# POSITIONALS ARGUMENTS
_positionals=();
_arg_name="";
# OPTIONALS ARGUMENTS
_arg_sensor=()
_arg_timer=()
_arg_endpoint=()
_arg_wifi_ssid=
_arg_wifi_pass=
_arg_include=
_arg_declare=
_arg_setup=
_arg_loop=
_arg_node="node"
_arg_file=
# FLAGS
_verbose_level="0";



print_help()
{
	_triggerSCHelp=1;

	if [[ "$_helpHasBeenPrinted" == "1" ]]; then
		_helpHasBeenPrinted=0;
		echo -e "[WIP] create a station main.cpp:"
	echo -e "	name: station name"
	echo -e "	-s, --sensor <sensor>: sensor to add, repeatable"
	echo -e "	-t, --timer <timer>: timer to add, repeatable"
	echo -e "	-e, --endpoint <endpoint>: endpoint to add, repeatable"
	echo -e "	-w, --wifi-ssid <wifi-ssid>: wifi ssid"
	echo -e "	-p, --wifi-pass <wifi-pass>: wifi password"
	echo -e "	--include <include>: include string"
	echo -e "	--declare <declare>: declare string"
	echo -e "	--setup <setup>: setup string"
	echo -e "	--loop <loop>: loop string"
	echo -e "	--node <node>: node executable [default: ' node ']"
	echo -e "	--file <file>: file to output to"
	echo -e "Usage :
	$0 <name> [--sensor <value>] [--timer <value>] [--endpoint <value>] [--wifi-ssid <value>] [--wifi-pass <value>] [--include <value>] [--declare <value>] [--setup <value>] [--loop <value>] [--node <value>] [--file <value>]";
	fi

}

log() {
	local _arg_msg="${1}";
	local _arg_level="${2:"0"}";
	if [ "${_arg_level}" -le "${_verbose_level}" ]; then
		case "$_arg_level" in
			-3)
				_arg_COLOR="\033[0;31m";
				;;
			-2)
				_arg_COLOR="\033[0;33m";
				;;
			-1)
				_arg_COLOR="\033[1;33m";
				;;
			1)
				_arg_COLOR="\033[0;32m";
				;;
			2)
				_arg_COLOR="\033[1;36m";
				;;
			3)
				_arg_COLOR="\033[0;36m";
				;;
			*)
				_arg_COLOR="\033[0m";
				;;
		esac
		echo -e "${_arg_COLOR}${_arg_msg}\033[0m";
	fi
}

parse_commandline()
{
	_positionals_count=0
	while test $# -gt 0
	do
		_key="$1"
		case "$_key" in
			-s|--sensor)
				test $# -lt 2 && die "Missing value for the option: '$_key'" 1
				_arg_sensor+=("$2")
				shift
				;;
			--sensor=*)
				_arg_sensor+=("${_key##--sensor=}")
				;;
			-s*)
				_arg_sensor+=("${_key##-s}")
				;;
			
			-t|--timer)
				test $# -lt 2 && die "Missing value for the option: '$_key'" 1
				_arg_timer+=("$2")
				shift
				;;
			--timer=*)
				_arg_timer+=("${_key##--timer=}")
				;;
			-t*)
				_arg_timer+=("${_key##-t}")
				;;
			
			-e|--endpoint)
				test $# -lt 2 && die "Missing value for the option: '$_key'" 1
				_arg_endpoint+=("$2")
				shift
				;;
			--endpoint=*)
				_arg_endpoint+=("${_key##--endpoint=}")
				;;
			-e*)
				_arg_endpoint+=("${_key##-e}")
				;;
			
			-w|--wifi-ssid)
				test $# -lt 2 && die "Missing value for the option: '$_key'" 1
				_arg_wifi_ssid="$2"
				shift
				;;
			--wifi-ssid=*)
				_arg_wifi_ssid="${_key##--wifi-ssid=}"
				;;
			-w*)
				_arg_wifi_ssid="${_key##-w}"
				;;
			
			-p|--wifi-pass)
				test $# -lt 2 && die "Missing value for the option: '$_key'" 1
				_arg_wifi_pass="$2"
				shift
				;;
			--wifi-pass=*)
				_arg_wifi_pass="${_key##--wifi-pass=}"
				;;
			-p*)
				_arg_wifi_pass="${_key##-p}"
				;;
			
			--include)
				test $# -lt 2 && die "Missing value for the option: '$_key'" 1
				_arg_include="$2"
				shift
				;;
			--include=*)
				_arg_include="${_key##--include=}"
				;;
			
			--declare)
				test $# -lt 2 && die "Missing value for the option: '$_key'" 1
				_arg_declare="$2"
				shift
				;;
			--declare=*)
				_arg_declare="${_key##--declare=}"
				;;
			
			--setup)
				test $# -lt 2 && die "Missing value for the option: '$_key'" 1
				_arg_setup="$2"
				shift
				;;
			--setup=*)
				_arg_setup="${_key##--setup=}"
				;;
			
			--loop)
				test $# -lt 2 && die "Missing value for the option: '$_key'" 1
				_arg_loop="$2"
				shift
				;;
			--loop=*)
				_arg_loop="${_key##--loop=}"
				;;
			
			--node)
				test $# -lt 2 && die "Missing value for the option: '$_key'" 1
				_arg_node="$2"
				shift
				;;
			--node=*)
				_arg_node="${_key##--node=}"
				;;
			
			--file)
				test $# -lt 2 && die "Missing value for the option: '$_key'" 1
				_arg_file="$2"
				shift
				;;
			--file=*)
				_arg_file="${_key##--file=}"
				;;
			
			-h|--help)
				print_help;
				exit 0;
				;;
			-h*)
				print_help;
				exit 0;
				;;
			-v|--version)
				print_version;
				exit 0;
				;;
			-v*)
				print_version;
				exit 0;
				;;
			--verbose)
				if [ $# -lt 2 ];then
					_verbose_level="$((_verbose_level + 1))";
				else
					_verbose_level="$2";
					shift;
				fi
				;;
			
			*)
				_last_positional="$1"
				_positionals+=("$_last_positional")
				_positionals_count=$((_positionals_count + 1))
				;;
		esac
		shift
	done
}


handle_passed_args_count()
{
	local _required_args_string="name"
	if [ "${_positionals_count}" -gt 1 ] && [ "$_helpHasBeenPrinted" == "1" ];then
		_PRINT_HELP=yes die "FATAL ERROR: There were spurious positional arguments --- we expect at most 1 (namely: $_required_args_string), but got ${_positionals_count} (the last one was: '${_last_positional}').\n\t${_positionals[*]}" 1
	fi
	if [ "${_positionals_count}" -lt 1 ] && [ "$_helpHasBeenPrinted" == "1" ];then
		_PRINT_HELP=yes die "FATAL ERROR: Not enough positional arguments - we require at least 1 (namely: $_required_args_string), but got only ${_positionals_count}.
	${_positionals[*]}" 1;
	fi
}


assign_positional_args()
{
	local _positional_name _shift_for=$1;
	_positional_names="_arg_name ";
	shift "$_shift_for"
	for _positional_name in ${_positional_names};do
		test $# -gt 0 || break;
		eval "if [ \"\$_one_of${_positional_name}\" != \"\" ];then [[ \"\${_one_of${_positional_name}[*]}\" =~ \"\${1}\" ]];fi" || die "${_positional_name} must be one of: $(eval "echo \"\${_one_of${_positional_name}[*]}\"")" 1;
		eval "$_positional_name=\${1}" || die "Error during argument parsing, possibly an ParseArger bug." 1;
		shift;
	done
}

print_debug()
{
	print_help
	# shellcheck disable=SC2145
	echo "DEBUG: $0 $@";
	
	echo -e "\tname: ${_arg_name}";
	echo -e "\tsensor: ${_arg_sensor[*]}";
	echo -e "\ttimer: ${_arg_timer[*]}";
	echo -e "\tendpoint: ${_arg_endpoint[*]}";
	echo -e "\twifi-ssid: ${_arg_wifi_ssid}";
	echo -e "\twifi-pass: ${_arg_wifi_pass}";
	echo -e "\tinclude: ${_arg_include}";
	echo -e "\tdeclare: ${_arg_declare}";
	echo -e "\tsetup: ${_arg_setup}";
	echo -e "\tloop: ${_arg_loop}";
	echo -e "\tnode: ${_arg_node}";
	echo -e "\tfile: ${_arg_file}";

}

print_version()
{
	echo "";
}

on_interrupt() {
	die Process aborted! 130;
}

parse_commandline "$@";
handle_passed_args_count;
assign_positional_args 1 "${_positionals[@]}";
trap on_interrupt INT;



# @parseArger-parsing-end
# print_debug "$@"
# @parseArger-end

jsonStr="name: \"${_arg_name}\",";

if [ "${#_arg_sensor[@]}" -gt 0 ]; then
	jsonStr+="sensors:[";
	for i in "${_arg_sensor[@]}"; do
		jsonStr+="\"${i}\",";
	done
	jsonStr+="],";
fi


if [ "$_arg_wifi_ssid" != "" ] || [ "$_arg_wifi_pass" != "" ]; then
	jsonStr+="wifi: {ssid: \"${_arg_wifi_ssid}\",pass: \"${_arg_wifi_pass}\"},";
fi

if [ "$_arg_include" != "" ] || [ "$_arg_include" != "" ] || [ "$_arg_setup" != "" ] || [ "$_arg_loop" != "" ]; then
	jsonStr+="plugins: {";
	if [ "$_arg_include" != "" ]; then
		jsonStr+="include: \"${_arg_include}\",";
	fi
	if [ "$_arg_declare" != "" ]; then
		jsonStr+="declare: \"${_arg_declare}\",";
	fi
	if [ "$_arg_setup" != "" ]; then
		jsonStr+="setup: \"${_arg_setup}\",";
	fi
	if [ "$_arg_loop" != "" ]; then
		jsonStr+="loop: \"${_arg_loop}\",";
	fi
	jsonStr+="},";
fi

if [ "${#_arg_timer[@]}" -gt 0 ]; then
	jsonStr+="timers:[";
	for i in "${_arg_timer[@]}"; do
		IFS=':' read -ra timer <<< "$i"
		jsonStr+="{name: \"${timer[0]}\",interval: \"${timer[1]}\", callback:\"[](BaseStation* station){}\"},";
	done
	jsonStr+="],";
fi

if [ "${#_arg_endpoint[@]}" -gt 0 ]; then
	jsonStr+="webServerRoutes:[";
	for i in "${_arg_endpoint[@]}"; do
		IFS=':' read -ra endpoint <<< "$i"
		jsonStr+="{url: \"${endpoint[0]}\"";
		if [ "${#endpoint[@]}" -gt 2 ]; then
			jsonStr+=",login: \"${endpoint[1]}\",password: \"${endpoint[2]}\"";
		else
			jsonStr+=",login: \"\",password: \"\"";
		fi
		jsonStr+=",callback:\"[](BaseStation* station, AsyncWebServerRequest* request){}\"}";
	done
	jsonStr+="],";
fi

jsonStr="{$jsonStr}";
tplStr=$(cat ./templates/main.cpp.eta);

output=$("$_arg_node" -e "eta=require('eta'); console.log(eta.render(\`$tplStr\`, $jsonStr));");

if [ "$_arg_file" != "" ]; then
	if [ "$_arg_file" == "-" ]; then
		echo -e "$output";
		exit 0;
	fi
else
	_arg_file="stations/${_arg_name}.main.cpp";
fi

if [ -f "$_arg_file" ]; then
	mv "$_arg_file" "$_arg_file.bak";
fi

echo -e "$output" > "$_arg_file";

#!/bin/bash
# @parseArger-begin
# @parseArger-help "read all stations" --option "help" --short-option "h"
# @parseArger-verbose --option "verbose" --level "0" --quiet-option "quiet"
# @parseArger-declarations
# @parseArger opt exclude "exclude a station" --short x --repeat
# @parseArger opt format "responses format" --short f
# @parseArger opt output "output file" --short o
# @parseArger-declarations-end

# @parseArger-utils
_helpHasBeenPrinted=1;
_SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd -P)";
# @parseArger-utils-end

# @parseArger-parsing
die()
{
	local _ret="${2:-1}"
	test "${_PRINT_HELP:-no}" = yes && print_help >&2
	log "$1" -3 >&2
	exit "${_ret}"
}


begins_with_short_option()
{
	local first_option all_short_options=''
	first_option="${1:0:1}"
	test "$all_short_options" = "${all_short_options/$first_option/}" && return 1 || return 0
}

# POSITIONALS ARGUMENTS
_positionals=();
# OPTIONALS ARGUMENTS
_arg_exclude=()
_arg_format=
_arg_output=
# FLAGS
_verbose_level="0";



print_help()
{
	_triggerSCHelp=1;

	if [[ "$_helpHasBeenPrinted" == "1" ]]; then
		_helpHasBeenPrinted=0;
		echo -e "read all stations:"
	echo -e "	-x, --exclude <exclude>: exclude a station, repeatable"
	echo -e "	-f, --format <format>: responses format"
	echo -e "	-o, --output <output>: output file"
	echo -e "Usage :
	$0 [--exclude <value>] [--format <value>] [--output <value>]";
	fi

}

log() {
	local _arg_msg="${1}";
	local _arg_level="${2:"0"}";
	if [ "${_arg_level}" -le "${_verbose_level}" ]; then
		case "$_arg_level" in
			-3)
				_arg_COLOR="[0;31m";
				;;
			-2)
				_arg_COLOR="[0;33m";
				;;
			-1)
				_arg_COLOR="[1;33m";
				;;
			1)
				_arg_COLOR="[0;32m";
				;;
			2)
				_arg_COLOR="[1;36m";
				;;
			3)
				_arg_COLOR="[0;36m";
				;;
			*)
				_arg_COLOR="[0m";
				;;
		esac
		echo -e "${_arg_COLOR}${_arg_msg}[0m";
	fi
}

parse_commandline()
{
	_positionals_count=0
	while test $# -gt 0
	do
		_key="$1"
		case "$_key" in
			-x|--exclude)
				test $# -lt 2 && die "Missing value for the option: '$_key'" 1
				_arg_exclude+=("$2")
				shift
				;;
			--exclude=*)
				_arg_exclude+=("${_key##--exclude=}")
				;;
			-x*)
				_arg_exclude+=("${_key##-x}")
				;;
			
			-f|--format)
				test $# -lt 2 && die "Missing value for the option: '$_key'" 1
				_arg_format="$2"
				shift
				;;
			--format=*)
				_arg_format="${_key##--format=}"
				;;
			-f*)
				_arg_format="${_key##-f}"
				;;
			
			-o|--output)
				test $# -lt 2 && die "Missing value for the option: '$_key'" 1
				_arg_output="$2"
				shift
				;;
			--output=*)
				_arg_output="${_key##--output=}"
				;;
			-o*)
				_arg_output="${_key##-o}"
				;;
			
			-h|--help)
				print_help;
				exit 0;
				;;
			-h*)
				print_help;
				exit 0;
				;;
			-v|--version)
				print_version;
				exit 0;
				;;
			-v*)
				print_version;
				exit 0;
				;;
			--verbose)
					if [ $# -lt 2 ];then
						_verbose_level="$((_verbose_level + 1))";
					else
						_verbose_level="$2";
						shift;
					fi
					;;
				--quiet)
					if [ $# -lt 2 ];then
						_verbose_level="$((_verbose_level - 1))";
					else
						_verbose_level="-$2";
						shift;
					fi
					;;
				
			*)
				_last_positional="$1"
				_positionals+=("$_last_positional")
				_positionals_count=$((_positionals_count + 1))
				;;
		esac
		shift
	done
}


handle_passed_args_count()
{
	local _required_args_string=""
	if [ "${_positionals_count}" -gt 0 ] && [ "$_helpHasBeenPrinted" == "1" ];then
		_PRINT_HELP=yes die "FATAL ERROR: There were spurious positional arguments --- we expect at most 0 (namely: $_required_args_string), but got ${_positionals_count} (the last one was: '${_last_positional}').
	${_positionals[*]}" 1
	fi
	if [ "${_positionals_count}" -lt 0 ] && [ "$_helpHasBeenPrinted" == "1" ];then
		_PRINT_HELP=yes die "FATAL ERROR: Not enough positional arguments - we require at least 0 (namely: $_required_args_string), but got only ${_positionals_count}.
	${_positionals[*]}" 1;
	fi
}


assign_positional_args()
{
	local _positional_name _shift_for=$1;
	_positional_names="";
	shift "$_shift_for"
	for _positional_name in ${_positional_names};do
		test $# -gt 0 || break;
		eval "if [ \"\$_one_of${_positional_name}\" != \"\" ];then [[ \"\${_one_of${_positional_name}[*]}\" =~ \"\${1}\" ]];fi" || die "${_positional_name} must be one of: $(eval "echo \"\${_one_of${_positional_name}[*]}\"")" 1;
		eval "$_positional_name=\${1}" || die "Error during argument parsing, possibly an ParseArger bug." 1;
		shift;
	done
}

print_debug()
{
	print_help
	# shellcheck disable=SC2145
	echo "DEBUG: $0 $@";
	
	echo -e "	exclude: ${_arg_exclude[*]}";
	echo -e "	format: ${_arg_format}";
	echo -e "	output: ${_arg_output}";

}

print_version()
{
	echo "";
}

on_interrupt() {
	die Process aborted! 130;
}

parse_commandline "$@";
handle_passed_args_count;
assign_positional_args 1 "${_positionals[@]}";
trap on_interrupt INT;



# @parseArger-parsing-end
# print_debug "$@"
# @parseArger-end

# shellcheck source=common
source "$_SCRIPT_DIR/common";

rcmd=("$_SCRIPT_DIR/read");

if [ "$_arg_format" != "" ]; then
	rcmd+=("--format" "$_arg_format");
fi
output="";
# Searching in the current directory
for file in "$_SCRIPT_DIR"/../stations/.stations/*; do
	if [ "${#_arg_exclude[@]}" -lt 1 ] || [[ "${_arg_exclude[*]}" != *" $file "* ]]; then
		_fname="$(basename "${file}")";
		toutput="$("${rcmd[@]}" "$_fname")";
		if [ "$toutput" != "" ]; then
			case "${_arg_format}" in
				"json")
					if [ "$output" != "" ]; then
						output+=",";
					fi
					output+="\"$_fname\":";
				;;
				"csv"|"xml")
					if [ "$output" != "" ]; then
						output+="\n";
					fi
				;;
				*)
					output+="\n$_fname : \n";
				;;
			esac
			output+="$toutput";
		fi
	fi
done

case "${_arg_format}" in
	"json")
		if [ "$output" != "" ]; then
			output="{${output}}";
		fi
	;;
	"xml")
		if [ "$output" != "" ]; then
			output="<data>${output}</data>";
		fi
	;;
esac

if [ "$_arg_output" != "" ]; then
	echo -e "$output" > "$_arg_output";
else
	echo -e "$output";
fi

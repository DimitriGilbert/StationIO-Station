#!/bin/bash
# @parseArger-begin
# @parseArger-help "I send an SOS to the world" --option "help" --short-option "h"
# @parseArger-declarations
# @parseArger pos name "station name"
# @parseArger opt ip "station ip"
# @parseArger opt port "host port upload flags, avoid random for firewalls" --default-value "46667"
# @parseArger opt board "PIO build environement name" --short b
# @parseArger opt pio "pio executable" --default-value "$HOME/.platformio/penv/bin/pio"
# @parseArger flag ota "OTA update" --on
# @parseArger flag fs "upload fs"
# @parseArger-declarations-end

# @parseArger-parsing
die()
{
	local _ret="${2:-1}"
	test "${_PRINT_HELP:-no}" = yes && print_help >&2
	echo "$1" >&2
	exit "${_ret}"
}


begins_with_short_option()
{
	local first_option all_short_options=''
	first_option="${1:0:1}"
	test "$all_short_options" = "${all_short_options/$first_option/}" && return 1 || return 0
}

# POSITIONALS ARGUMENTS
_positionals=();
_arg_name="";
# OPTIONALS ARGUMENTS
_arg_ip=
_arg_port="46667"
_arg_board=
_arg_pio="$HOME/.platformio/penv/bin/pio"
# FLAGS
_arg_ota="on"
_arg_fs="off"


print_help()
{
	echo -e "I send an SOS to the world:"
	echo -e "	name: station name"
	echo -e "	--ip <ip>: station ip"
	echo -e "	--port <port>: host port upload flags, avoid random for firewalls [default: ' 46667 ']"
	echo -e "	-b, --board <board>: PIO build environement name"
	echo -e "	--pio <pio>: pio executable [default: ' $HOME/.platformio/penv/bin/pio ']"
	echo -e "	--ota|--no-ota: OTA update, on by default (use --no-ota to turn it off)"
	echo -e "	--fs|--no-fs: upload fs"
	echo -e "Usage :
	$0 <name> [--ip <value>] [--port <value>] [--board <value>] [--pio <value>] [--[no-]ota] [--[no-]fs]"
}

parse_commandline()
{
	_positionals_count=0
	while test $# -gt 0
	do
		_key="$1"
		case "$_key" in
			--ip)
				test $# -lt 2 && die "Missing value for the option: '$_key'" 1
				_arg_ip="$2"
				shift
				;;
			--ip=*)
				_arg_ip="${_key##--ip=}"
				;;
			
			--port)
				test $# -lt 2 && die "Missing value for the option: '$_key'" 1
				_arg_port="$2"
				shift
				;;
			--port=*)
				_arg_port="${_key##--port=}"
				;;
			
			-b|--board)
				test $# -lt 2 && die "Missing value for the option: '$_key'" 1
				_arg_board="$2"
				shift
				;;
			--board=*)
				_arg_board="${_key##--board=}"
				;;
			-b*)
				_arg_board="${_key##-b}"
				;;
			
			--pio)
				test $# -lt 2 && die "Missing value for the option: '$_key'" 1
				_arg_pio="$2"
				shift
				;;
			--pio=*)
				_arg_pio="${_key##--pio=}"
				;;
			
			--no-ota|--ota)
				_arg_ota="on"
				test "${1:0:5}" = "--no-" && _arg_ota="off"
				;;
			--no-fs|--fs)
				_arg_fs="on"
				test "${1:0:5}" = "--no-" && _arg_fs="off"
				;;
			-h|--help)
				print_help;
				exit 0;
				;;
			-h*)
				print_help;
				exit 0;
				;;
			*)
				_last_positional="$1"
				_positionals+=("$_last_positional")
				_positionals_count=$((_positionals_count + 1))
				;;
		esac
		shift
	done
}


handle_passed_args_count()
{
	local _required_args_string="name"
	test "${_positionals_count}" -le 1 || _PRINT_HELP=yes die "FATAL ERROR: There were spurious positional arguments --- we expect at most 1 (namely: $_required_args_string), but got ${_positionals_count} (the last one was: '${_last_positional}')." 1
	test "${_positionals_count}" -ge 1 || _PRINT_HELP=yes die "FATAL ERROR: Not enough positional arguments - we require at least 1 (namely: $_required_args_string), but got only ${_positionals_count}." 1
}


assign_positional_args()
{
	local _positional_name _shift_for=$1;
	_positional_names="_arg_name ";
	shift "$_shift_for"
	for _positional_name in ${_positional_names};do
		test $# -gt 0 || break;
		eval "if [ \"\$_one_of${_positional_name}\" != \"\" ];then [[ \"\${_one_of${_positional_name}[*]}\" =~ \"\${1}\" ]];fi" || die "${_positional_name} must be one of: $(eval "echo \"\${_one_of${_positional_name}[*]}\"")" 1
eval "$_positional_name=\${1}" || die "Error during argument parsing, possibly an Argbash bug." 1;
		shift;
	done
}

print_debug()
{
	print_help
	# shellcheck disable=SC2145
	echo "DEBUG: $0 $@";
	
	echo -e "\tname: ${_arg_name}";
	echo -e "\tip: ${_arg_ip | sed 's/-/_/g'}";
	echo -e "\tport: ${_arg_port | sed 's/-/_/g'}";
	echo -e "\tboard: ${_arg_board | sed 's/-/_/g'}";
	echo -e "\tpio: ${_arg_pio | sed 's/-/_/g'}";
	echo -e "\tota: ${_arg_ota | sed 's/-/_/g'}";
	echo -e "\tfs: ${_arg_fs | sed 's/-/_/g'}";

}

parse_commandline "$@"
handle_passed_args_count
assign_positional_args 1 "${_positionals[@]}"

# @parseArger-parsing-end
# print_debug "$@"
# @parseArger-end

if [ -f "stations/${_arg_name}.main.cpp" ]; then
	# shellcheck source="../stations/stations"
	source "./stations/stations";
	# shellcheck source=./exportStationConf
	source "utils/exportStationConf" "${_arg_name}";	
	
	ucmd="${_arg_pio} run -t upload";
	if [ "$_arg_fs" == "on" ]; then
		ucmd+="fs";
	fi

	if [ "$_arg_board" == "" ]; then
		_arg_board="${stationIOboard}";
	else
		./utils/setStation "${_arg_name}" --board "${_arg_board}";
	fi
	if [ "$_arg_board" != "" ]; then
		ucmd="$ucmd -e ${_arg_board}";
	fi

	if [ "$_arg_ip" == "" ]; then
		_arg_ip="${stationIOip}";
	else
		./utils/setStation "${_arg_name}" --ip "${_arg_ip}";
	fi

	if [ "$_arg_ip" != "" ] && [ "$_arg_ota" == "on" ]; then
		ucmd="$ucmd --upload-port ${_arg_ip}";
	fi

	if [ -f "src/main.cpp" ]; then
		mv "src/main.cpp" "src/main.cpp.bak";
	fi

	cp "stations/${_arg_name}.main.cpp" "src/main.cpp";

	if [ "$_arg_ip" != "" ] && [ "$_arg_ota" == "on" ]; then
		(export PLATFORMIO_UPLOAD_FLAGS=--host_port=$_arg_port; $ucmd;)
	else
		$ucmd;
	fi

	# if success
	if [ $? -eq 0 ]; then
		rm "src/main.cpp";
		if [ -f "src/main.cpp.bak" ]; then
			mv "src/main.cpp.bak" "src/main.cpp";
		fi
	fi
else
	die "Station ${_arg_name} not found";
fi

#!/bin/bash
# @parseArger-begin
# @parseArger-help "I send an SOS to the world" --option "help" --short-option "h"
# @parseArger-verbose --option "verbose" --level "0" --quiet-option "quiet"
# @parseArger-leftovers leftovers
# @parseArger-declarations
# @parseArger flag pull "pull latest images"
# @parseArger flag build "build"
# @parseArger flag update "pull and build"
# @parseArger flag restart "restart stack if it is running" --on
# @parseArger flag grafana "start grafana service, force --influxdb" --on
# @parseArger flag influxdb "start influxdb service" --on
# @parseArger flag detach "detach" --short d
# @parseArger-declarations-end

# @parseArger-utils
_helpHasBeenPrinted=1;
_SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd -P)";
# @parseArger-utils-end

# @parseArger-parsing
die()
{
	local _ret="${2:-1}"
	test "${_PRINT_HELP:-no}" = yes && print_help >&2
	log "$1" -3 >&2
	exit "${_ret}"
}


begins_with_short_option()
{
	local first_option all_short_options=''
	first_option="${1:0:1}"
	test "$all_short_options" = "${all_short_options/$first_option/}" && return 1 || return 0
}

# POSITIONALS ARGUMENTS
_positionals=();
_optional_positionals=();
# OPTIONALS ARGUMENTS
# FLAGS
_arg_pull="off"
_arg_build="off"
_arg_update="off"
_arg_restart="on"
_arg_grafana="on"
_arg_influxdb="on"
_arg_detach="off"
# LEFTOVERS
_arg_leftovers=()
_verbose_level="0";



print_help()
{
	_triggerSCHelp=1;

	if [[ "$_helpHasBeenPrinted" == "1" ]]; then
		_helpHasBeenPrinted=0;
		echo -e "I send an SOS to the world:"
	echo -e "	--pull|--no-pull: pull latest images"
	echo -e "	--build|--no-build: build"
	echo -e "	--update|--no-update: pull and build"
	echo -e "	--restart|--no-restart: restart stack if it is running, on by default (use --no-restart to turn it off)"
	echo -e "	--grafana|--no-grafana: start grafana service, force --influxdb, on by default (use --no-grafana to turn it off)"
	echo -e "	--influxdb|--no-influxdb: start influxdb service, on by default (use --no-influxdb to turn it off)"
	echo -e "	-d|--detach|--no-detach: detach"
	echo -e "Usage :
	$0 [--[no-]pull] [--[no-]build] [--[no-]update] [--[no-]restart] [--[no-]grafana] [--[no-]influxdb] [--[no-]detach]";
	fi

}

log() {
	local _arg_msg="${1}";
	local _arg_level="${2:-'0'}";
	if [ "${_arg_level}" -le "${_verbose_level}" ]; then
		case "$_arg_level" in
			-3)
				_arg_COLOR="\033[0;31m";
				;;
			-2)
				_arg_COLOR="\033[0;33m";
				;;
			-1)
				_arg_COLOR="\033[1;33m";
				;;
			1)
				_arg_COLOR="\033[0;32m";
				;;
			2)
				_arg_COLOR="\033[1;36m";
				;;
			3)
				_arg_COLOR="\033[0;36m";
				;;
			*)
				_arg_COLOR="\033[0m";
				;;
		esac
		echo -e "${_arg_COLOR}${_arg_msg}\033[0m";
	fi
}

parse_commandline()
{
	_positionals_count=0
	while test $# -gt 0
	do
		_key="$1"
		case "$_key" in
			--pull)
				_arg_pull="on"
				;;
			--no-pull)
				_arg_pull="off"
				;;
			--build)
				_arg_build="on"
				;;
			--no-build)
				_arg_build="off"
				;;
			--update)
				_arg_update="on"
				;;
			--no-update)
				_arg_update="off"
				;;
			--restart)
				_arg_restart="on"
				;;
			--no-restart)
				_arg_restart="off"
				;;
			--grafana)
				_arg_grafana="on"
				;;
			--no-grafana)
				_arg_grafana="off"
				;;
			--influxdb)
				_arg_influxdb="on"
				;;
			--no-influxdb)
				_arg_influxdb="off"
				;;
			-d|--detach)
				_arg_detach="on"
				;;
			--no-detach)
				_arg_detach="off"
				;;
			-h|--help)
				print_help;
				exit 0;
				;;
			-h*)
				print_help;
				exit 0;
				;;
			-v|--version)
				print_version;
				exit 0;
				;;
			-v*)
				print_version;
				exit 0;
				;;
			--verbose)
					if [ $# -lt 2 ];then
						_verbose_level="$((_verbose_level + 1))";
					else
						_verbose_level="$2";
						shift;
					fi
					;;
				--quiet)
					if [ $# -lt 2 ];then
						_verbose_level="$((_verbose_level - 1))";
					else
						_verbose_level="-$2";
						shift;
					fi
					;;
				
			*)
				_last_positional="$1"
				_positionals+=("$_last_positional")
				_positionals_count=$((_positionals_count + 1))
				;;
		esac
		shift
	done
}


handle_passed_args_count()
{
	local _required_args_string=""
	if [ "${_positionals_count}" -lt 0 ] && [ "$_helpHasBeenPrinted" == "1" ];then
		_PRINT_HELP=yes die "FATAL ERROR: Not enough positional arguments - we require at least 0 (namely: $_required_args_string), but got only ${_positionals_count}.
	${_positionals[*]}" 1;
	fi
}


assign_positional_args()
{
	local _positional_name _shift_for=$1;
	_positional_names="";
	_leftovers_count=$((${#_positionals[@]} - 0))
	for ((ii = 0; ii < _leftovers_count; ii++));do
		_positional_names="$_positional_names _arg_leftovers[$((ii + 0))]";
	done

	shift "$_shift_for"
	for _positional_name in ${_positional_names};do
		test $# -gt 0 || break;
		if ! [[ "$_positional_name" =~ "_arg_leftovers" ]];then
			eval "if [ \"\$_one_of${_positional_name}\" != \"\" ];then [[ \"\${_one_of${_positional_name}[*]}\" =~ \"\${1}\" ]];fi" || die "${_positional_name} must be one of: $(eval "echo \"\${_one_of${_positional_name}[*]}\"")" 1;
		fi
		eval "$_positional_name=\${1}" || die "Error during argument parsing, possibly an ParseArger bug." 1;
		shift;
	done
}

print_debug()
{
	print_help
	# shellcheck disable=SC2145
	echo "DEBUG: $0 $@";
	
	echo -e "\tpull: ${_arg_pull}";
	echo -e "\tbuild: ${_arg_build}";
	echo -e "\tupdate: ${_arg_update}";
	echo -e "\trestart: ${_arg_restart}";
	echo -e "\tgrafana: ${_arg_grafana}";
	echo -e "\tinfluxdb: ${_arg_influxdb}";
	echo -e "\tdetach: ${_arg_detach}";
	echo -e "\tleftovers: ${_arg_leftovers[*]}";

}

print_version()
{
	echo "";
}

on_interrupt() {
	die Process aborted! 130;
}

parse_commandline "$@";
handle_passed_args_count;
assign_positional_args 1 "${_positionals[@]}";
trap on_interrupt INT;



# @parseArger-parsing-end
# print_debug "$@"
# @parseArger-end

# shellcheck source=common
source "$_SCRIPT_DIR/common";
# shellcheck source="../stations/stations"
source "$_SCRIPT_DIR/../stations/stations";
# shellcheck source="../.env"
source "$_SCRIPT_DIR/../.env";

# TODO: handle service to start, no need for platformio by default
dccmd=(docker compose -p "$StationIO_dc_name" up);

if [ "$_arg_grafana" == "on" ]; then
	dccmd+=(grafana);
	_arg_influxdb="on";
fi

if [ "$_arg_influxdb" == "on" ]; then
	dccmd+=(influxdb);
fi

if [ "$_arg_detach" == "on" ]; then
	dccmd+=(-d);
fi

if [[ "${_arg_update}" == "on" ]]; then
	log "update: --pull --build" 2;
	_arg_build="on";
	_arg_pull="on";
fi

if [[ "${_arg_pull}" == "on" ]]; then
	log "Pulling/Building latest images" 2;
	docker pull influxDB:latest;
	docker pull grafana/grafana-oss:latest;
	docker build -t stationio/pio - < "$_SCRIPT_DIR/../dockerfile";
fi

if [[ "${_arg_build}" == "on" ]]; then
	dccmd+=(--build);
fi

if [ "${#_arg_leftovers[@]}" -gt 0 ]; then
	dccmd+=("${_arg_leftovers[@]}");
fi

log "${dccmd[*]}" 1;
"${dccmd[@]}"
